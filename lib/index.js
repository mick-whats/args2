// Generated by CoffeeScript 1.10.0
(function() {
  var Args2, _,
    slice = [].slice;

  _ = require('lodash');

  Args2 = (function() {
    function Args2(args1) {
      var args, res;
      this.args = args1;
      if (this["arguments"] != null) {
        args = Array.prototype.slice.call(this["arguments"], 0);
      } else if (this.args) {
        args = Array.prototype.slice.call(this.args, 0);
      } else {
        args = Array.prototype.slice.call(this, 0);
      }
      res = {
        nums: [],
        strs: [],
        objs: [],
        arrays: [],
        bools: [],
        funcs: [],
        others: []
      };
      args.forEach(function(item) {
        if (_.isNumber(item)) {
          return res.nums.push(item);
        } else if (_.isString(item)) {
          return res.strs.push(item);
        } else if (_.isPlainObject(item)) {
          return res.objs.push(item);
        } else if (_.isArray(item)) {
          return res.arrays.push(item);
        } else if (_.isBoolean(item)) {
          return res.bools.push(item);
        } else if (_.isFunction(item)) {
          return res.funcs.push(item);
        } else {
          return res.others.push(item);
        }
      });
      _.merge(this, res);
      return this;
    }

    Args2.prototype.get = function(argType, required, defaultValue, last) {
      var argArray, dict, errMsg;
      if (last == null) {
        last = false;
      }
      dict = {
        strs: 'String',
        nums: 'Number',
        objs: 'Object',
        arrays: 'Array',
        bools: 'Boolean',
        funcs: 'Function',
        others: 'Other'
      };
      argArray = this[argType];
      if (argArray.length) {
        if (last) {
          return argArray.pop();
        } else {
          return argArray.shift();
        }
      } else {
        if (required) {
          if (defaultValue) {
            errMsg = defaultValue;
          } else {
            errMsg = dict[argType] + " argument required";
          }
          throw new Error(errMsg);
        } else if (_.isUndefined(defaultValue)) {
          return void 0;
        } else {
          return defaultValue;
        }
      }
    };

    Args2.prototype.str = function(required, defaultValue) {
      return this.get('strs', required, defaultValue);
    };

    Args2.prototype.num = function(required, defaultValue) {
      return this.get('nums', required, defaultValue);
    };

    Args2.prototype.obj = function(required, defaultValue) {
      return this.get('objs', required, defaultValue);
    };

    Args2.prototype.array = function(required, defaultValue) {
      return this.get('arrays', required, defaultValue);
    };

    Args2.prototype.bool = function(required, defaultValue) {
      return this.get('bools', required, defaultValue);
    };

    Args2.prototype.func = function(required, defaultValue) {
      return this.get('funcs', required, defaultValue);
    };

    Args2.prototype.other = function(required, defaultValue) {
      return this.get('others', required, defaultValue);
    };

    Args2.prototype.string = Args2.prototype.str;

    Args2.prototype.number = Args2.prototype.num;

    Args2.prototype.object = Args2.prototype.obj;

    Args2.prototype.arr = Args2.prototype.array;

    Args2.prototype.boolean = Args2.prototype.bool;

    Args2.prototype["function"] = Args2.prototype.func;

    Args2.prototype.callback = Args2.prototype.func;

    Args2.prototype.rStr = function(required, defaultValue) {
      return this.get('strs', required, defaultValue, true);
    };

    Args2.prototype.rNum = function(required, defaultValue) {
      return this.get('nums', required, defaultValue, true);
    };

    Args2.prototype.rObj = function(required, defaultValue) {
      return this.get('objs', required, defaultValue, true);
    };

    Args2.prototype.rArray = function(required, defaultValue) {
      return this.get('arrays', required, defaultValue, true);
    };

    Args2.prototype.rBool = function(required, defaultValue) {
      return this.get('bools', required, defaultValue, true);
    };

    Args2.prototype.rFunc = function(required, defaultValue) {
      return this.get('funcs', required, defaultValue, true);
    };

    Args2.prototype.rOther = function(required, defaultValue) {
      return this.get('others', required, defaultValue, true);
    };

    Args2.prototype.rString = Args2.prototype.rStr;

    Args2.prototype.rNumber = Args2.prototype.rNum;

    Args2.prototype.rObject = Args2.prototype.rObj;

    Args2.prototype.rArr = Args2.prototype.rArray;

    Args2.prototype.rBoolean = Args2.prototype.rBool;

    Args2.prototype.rFunction = Args2.prototype.rFunc;

    Args2.prototype.rCallback = Args2.prototype.rFunc;


    /*
     * argumentsを別のFunctionに丸投げする
     * @param [Function] 丸投げする先のFunction
     * @param [Arguments] 必ずargumentsを指定
     * @option [Argument] 追加する引数があれば指定。可変長引数。
     * @return [???] 丸投げしたFunctionのvalue
     */

    Args2.bridge = function() {
      var _args, args, fn;
      fn = arguments[0], args = arguments[1], _args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      args = Array.prototype.slice.call(args, 0);
      if (_args.length) {
        args = args.concat(_args);
      }
      return fn.apply(this, args);
    };

    return Args2;

  })();

  module.exports = Args2;

}).call(this);
