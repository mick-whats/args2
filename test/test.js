// Generated by CoffeeScript 1.10.0
(function() {
  var _, args2, assert, equal;

  args2 = require('../');

  assert = require('chai').assert;

  _ = require('lodash');

  equal = assert.deepEqual;

  describe("args2 test", function() {
    it("with this function", function() {
      var args, function1, getArgs, obj1;
      getArgs = function() {
        return args2.call(getArgs);
      };
      obj1 = {
        name: 'bob',
        age: 21
      };
      function1 = function() {
        return 999;
      };
      args = getArgs([true, false], 1, '2', 3, '4', 5, '6', obj1, function1);
      equal(args.nums[0], 1);
      equal(args.nums[1], 3);
      equal(args.nums[2], 5);
      equal(args.strs[0], '2');
      equal(args.strs[1], '4');
      equal(args.strs[2], '6');
      equal(args.others[0], [true, false]);
      equal(args.objs[0], {
        name: 'bob',
        age: 21
      });
      return equal(args.funcs[0](), 999);
    });
    return it("with arguments", function() {
      var args, function1, getArgs, obj1;
      getArgs = function() {
        return args2.call(arguments);
      };
      obj1 = {
        name: 'bob',
        age: 21
      };
      function1 = function() {
        return 999;
      };
      args = getArgs([true, false], 1, '2', 3, '4', 5, '6', obj1, function1);
      equal(args.nums[0], 1);
      equal(args.nums[1], 3);
      equal(args.nums[2], 5);
      equal(args.strs[0], '2');
      equal(args.strs[1], '4');
      equal(args.strs[2], '6');
      equal(args.others[0], [true, false]);
      equal(args.objs[0], {
        name: 'bob',
        age: 21
      });
      return equal(args.funcs[0](), 999);
    });
  });

  describe("sample", function() {
    var sampleFunction;
    sampleFunction = function() {
      var callback, funcs, nums, ref, strs, sum, text;
      ref = args2.call(sampleFunction), strs = ref.strs, nums = ref.nums, funcs = ref.funcs;
      if (!funcs.length) {
        throw new Error('Function is required');
      }
      callback = funcs[0];
      if (!strs[0] || !nums[0] || !nums[1]) {
        callback(new Error('Argument is missing'));
      }
      text = strs[0];
      sum = nums[0] + nums[1];
      return callback(null, {
        text: text,
        sum: sum
      });
    };
    it("sample test", function() {
      var callback, fn1;
      callback = function(err, res) {
        if (err) {
          throw err;
        }
        return console.log(res);
      };
      fn1 = function() {
        return sampleFunction();
      };
      assert.throws(fn1, 'Function is required');
      fn1 = function() {
        return sampleFunction(callback);
      };
      return assert.throws(fn1, 'Argument is missing');
    });
    it("sample test(and callback)", function(done) {
      return sampleFunction('test1', 1, 2, function(err, res) {
        equal(res, {
          text: 'test1',
          sum: 3
        });
        return done();
      });
    });
    return it("sample test(Another arguments)", function(done) {
      return sampleFunction(function(err, res) {
        equal(res, {
          text: 'test2',
          sum: 3
        });
        return done();
      }, 1, 2, 'test2');
    });
  });

}).call(this);
