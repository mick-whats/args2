// Generated by CoffeeScript 1.12.7
(function() {
  var _, args2, test;

  args2 = require('../');

  test = require('ava').test;

  _ = require('lodash');

  test('case 1', function(t) {
    var sampleFn;
    sampleFn = function() {
      var fn, ref, text1, text2;
      ref = args2.assign(arguments, ['str', 'str', 'fn']), text1 = ref[0], text2 = ref[1], fn = ref[2];
      t.deepEqual(text1, 'a');
      t.deepEqual(text2, 'b');
      return t.deepEqual(fn(), true);
    };
    return sampleFn('a', 'b', function() {
      return true;
    });
  });

  test('case 2', function(t) {
    var sampleFn;
    sampleFn = function() {
      var fn, ref, text1, text2;
      ref = args2.assign(arguments, ['str', 'str', 'fn']), text1 = ref[0], text2 = ref[1], fn = ref[2];
      t.deepEqual(text1, 'a');
      t.deepEqual(text2, void 0);
      return t.deepEqual(fn(), true);
    };
    return sampleFn('a', function() {
      return true;
    });
  });

  test('case 3', function(t) {
    var sampleFn;
    sampleFn = function() {
      var fn, num1, ref, text1;
      ref = args2.assign(arguments, ['str', 'num', 'fn']), text1 = ref[0], num1 = ref[1], fn = ref[2];
      t.deepEqual(text1, 'a');
      t.deepEqual(num1, 1);
      return t.deepEqual(fn(), true);
    };
    return sampleFn('a', 1, function() {
      return true;
    });
  });

  test('case 4', function(t) {
    var sampleFn;
    sampleFn = function() {
      var fn, num1, ref, text1;
      ref = args2.assign(arguments, ['str', 'num', 'fn']), text1 = ref[0], num1 = ref[1], fn = ref[2];
      t.deepEqual(text1, 'a');
      t.deepEqual(num1, void 0);
      return t.deepEqual(fn(), true);
    };
    return sampleFn('a', function() {
      return true;
    });
  });

  test('case 5', function(t) {
    var sampleFn;
    sampleFn = function() {
      var fn, obj1, ref, text1;
      ref = args2.assign(arguments, ['str', 'obj', 'fn']), text1 = ref[0], obj1 = ref[1], fn = ref[2];
      t.deepEqual(text1, 'a');
      t.deepEqual(obj1, {
        foo: 'bar'
      });
      return t.deepEqual(fn(), true);
    };
    return sampleFn('a', {
      foo: 'bar'
    }, function() {
      return true;
    });
  });

  test('case 6', function(t) {
    var sampleFn;
    sampleFn = function() {
      var fn, obj1, ref, text1;
      ref = args2.assign(arguments, ['str', 'obj', 'fn']), text1 = ref[0], obj1 = ref[1], fn = ref[2];
      t.deepEqual(text1, 'a');
      t.deepEqual(obj1, void 0);
      return t.deepEqual(fn(), true);
    };
    return sampleFn('a', function() {
      return true;
    });
  });

  test('case 7', function(t) {
    var sampleFn;
    sampleFn = function() {
      var arr1, fn, ref, text1;
      ref = args2.assign(arguments, ['str', 'arr', 'fn']), text1 = ref[0], arr1 = ref[1], fn = ref[2];
      t.deepEqual(text1, 'a');
      t.deepEqual(arr1, ['x']);
      return t.deepEqual(fn(), true);
    };
    return sampleFn('a', ['x'], function() {
      return true;
    });
  });

  test('case 8', function(t) {
    var sampleFn;
    sampleFn = function() {
      var arr1, fn, ref, text1;
      ref = args2.assign(arguments, ['str', 'arr', 'fn']), text1 = ref[0], arr1 = ref[1], fn = ref[2];
      t.deepEqual(text1, 'a');
      t.deepEqual(arr1, void 0);
      return t.deepEqual(fn(), true);
    };
    return sampleFn('a', function() {
      return true;
    });
  });

  test('case 9', function(t) {
    var sampleFn;
    sampleFn = function() {
      var bool1, fn, ref, text1;
      ref = args2.assign(arguments, ['str', 'bool', 'fn']), text1 = ref[0], bool1 = ref[1], fn = ref[2];
      t.deepEqual(text1, 'a');
      t.deepEqual(bool1, false);
      return t.deepEqual(fn(), true);
    };
    return sampleFn('a', false, function() {
      return true;
    });
  });

  test('case 10', function(t) {
    var sampleFn;
    sampleFn = function() {
      var bool1, fn, ref, text1;
      ref = args2.assign(arguments, ['str', 'bool', 'fn']), text1 = ref[0], bool1 = ref[1], fn = ref[2];
      t.deepEqual(text1, 'a');
      t.deepEqual(bool1, void 0);
      return t.deepEqual(fn(), true);
    };
    return sampleFn('a', function() {
      return true;
    });
  });

  test('case 11', function(t) {
    var sampleFn;
    sampleFn = function() {
      var fn, num1, ref, text1;
      ref = args2.assign(arguments, ['str', 'num', 'fn']), text1 = ref[0], num1 = ref[1], fn = ref[2];
      t.deepEqual(text1, 'a');
      t.deepEqual(num1, 1);
      return t.deepEqual(fn(), true);
    };
    sampleFn('a', 1, function() {
      return true;
    });
    return sampleFn(1, (function() {
      return true;
    }), 'a');
  });

  test('case 12', function(t) {
    var sampleFn;
    sampleFn = function() {
      var delay, fn, params, ref;
      ref = args2.assign(arguments, ['num', 'fn']), delay = ref[0], fn = ref[1], params = ref[2];
      t.deepEqual(delay, 100);
      t.deepEqual(fn(), true);
      return t.deepEqual(params, ['text1', 'bool1']);
    };
    sampleFn(100, (function() {
      return true;
    }), 'text1', 'bool1');
    return sampleFn((function() {
      return true;
    }), 100, 'text1', 'bool1');
  });

  return;

}).call(this);
