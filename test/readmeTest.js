// Generated by CoffeeScript 1.10.0
(function() {
  var _, args2, assert, equal;

  args2 = require('../');

  assert = require('chai').assert;

  _ = require('lodash');

  equal = assert.deepEqual;

  describe("readme sample", function() {
    it("before 1", function() {
      var fn, sampleFunction;
      sampleFunction = function(uri) {
        if (typeof uri === 'undefined') {
          throw new Error('undefined is not a valid uri or options object.');
        }
      };
      fn = function() {
        return sampleFunction();
      };
      return assert.throws(fn, /undefined is not a valid uri or options object/);
    });
    it("after 1", function() {
      var fn, sampleFunction;
      sampleFunction = function() {
        var args, uri;
        args = new args2();
        return uri = args.str(true, 'undefined is not a valid uri or options object.');
      };
      fn = function() {
        return sampleFunction();
      };
      return assert.throws(fn, /undefined is not a valid uri or options object/);
    });
    it("before 2", function(done) {
      var sampleFunction;
      sampleFunction = function() {
        var args, callback, options;
        args = Array.prototype.slice.call(arguments, 0);
        callback = args.pop();
        if (typeof callback !== 'function') {
          args.push(callback);
        }
        options = args.length ? args.shift() : {};
        options = typeof callback === 'function' ? options : callback;
        options = options === null ? {} : options;
        if (typeof callback === 'function') {
          callback(null, options);
        } else {
          return options;
        }
      };
      equal(sampleFunction({
        name: 'bob'
      }), {
        name: 'bob'
      });
      return sampleFunction({
        name: 'sum'
      }, function(err, res) {
        equal(res, {
          name: 'sum'
        });
        return done();
      });
    });
    return it("after 2", function(done) {
      var sampleFunction;
      sampleFunction = function() {
        var args, callback, options;
        args = new args2(arguments);
        callback = args.func();
        options = args.obj(false, {});
        if (callback) {
          callback(null, options);
        } else {
          return options;
        }
      };
      equal(sampleFunction({
        name: 'bob'
      }), {
        name: 'bob'
      });
      return sampleFunction({
        name: 'sum'
      }, function(err, res) {
        equal(res, {
          name: 'sum'
        });
        return done();
      });
    });
  });

  describe("get", function() {
    it("case 1", function() {
      var sampleFunction;
      sampleFunction = function() {
        var args, text1, text2, text3;
        args = new args2(arguments);
        text1 = args.str(true);
        text2 = args.str(false, 'default_value ');
        text3 = args.str();
        return text1 + text2 + text3;
      };
      equal(sampleFunction('hello ', 'world ', 'and you'), 'hello world and you');
      equal(sampleFunction('hello ', 'world '), 'hello world undefined');
      equal(sampleFunction('hello '), 'hello default_value undefined');
      return assert.throws((function() {
        return sampleFunction();
      }), /String argument required/);
    });
    return it("case 2", function() {
      var sampleFunction;
      sampleFunction = function() {
        var args, text1;
        args = new args2(arguments);
        return text1 = args.str(true, 'custom message');
      };
      return assert.throws((function() {
        return sampleFunction();
      }), /custom message/);
    });
  });

  describe("get right", function() {
    return it("case 1", function() {
      var sampleFunction;
      sampleFunction = function() {
        var args, text1, text2;
        args = new args2(arguments);
        text2 = args.rStr(true);
        text1 = args.str();
        return text1 + text2;
      };
      equal(sampleFunction('hello ', 'world ', 'and you'), 'hello and you');
      equal(sampleFunction('hello ', 'world '), 'hello world ');
      equal(sampleFunction('hello '), 'undefinedhello ');
      return assert.throws((function() {
        return sampleFunction();
      }), /String argument required/);
    });
  });

  describe("bridge", function() {
    var sum;
    sum = function() {
      var args;
      args = new args2(arguments);
      return args.nums.reduce(function(p, c) {
        return p + c;
      });
    };
    it("baseFunction", function() {
      return equal(sum(1, 2, 3), 6);
    });
    it("bridgeFunction", function() {
      var bridgeFunction1;
      bridgeFunction1 = function() {
        return args2.bridge(sum, arguments);
      };
      return equal(bridgeFunction1(2, 3, 4), 9);
    });
    it("bridgeFunction add argument", function() {
      var bridgeFunction2;
      bridgeFunction2 = function() {
        return args2.bridge(sum, arguments, 1);
      };
      return equal(bridgeFunction2(2, 3, 4), 10);
    });
    return it("bridgeFunction add arguments", function() {
      var bridgeFunction3;
      bridgeFunction3 = function() {
        return args2.bridge(sum, arguments, 10, 100, 1000);
      };
      return equal(bridgeFunction3(2, 3, 4), 1119);
    });
  });

}).call(this);
