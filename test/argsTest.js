// Generated by CoffeeScript 1.12.7
(function() {
  var _, args2, assert, equal;

  args2 = require('../');

  assert = require('chai').assert;

  _ = require('lodash');

  equal = assert.deepEqual;

  describe("args.args", function() {
    var Foo, fn1, fn2;
    Foo = function() {
      return this.a = 1;
    };
    fn1 = function() {
      return 'function1';
    };
    fn2 = function() {
      return 'function2';
    };
    it("str...", function() {
      var fn;
      fn = function() {
        var args;
        args = new args2(arguments);
        equal(args.args[0], 'test1');
        args.str();
        equal(args.args[0], 'test2');
        args.str();
        equal(args.args[0], 111);
        args.num();
        equal(args.args[0], 222);
        args.num();
        equal(args.args[0], {
          name: 'sam'
        });
        args.arr();
        equal(args.args[0], {
          name: 'sam'
        });
        args.other();
        equal(args.args[0], {
          name: 'sam'
        });
        args.rFunc();
        equal(args.args[0], {
          name: 'sam'
        });
        args.rOther();
        equal(args.args[0], {
          name: 'sam'
        });
        args.bool();
        equal(args.args[0], {
          name: 'sam'
        });
        args.obj();
        equal(args.args[0], {
          age: 17
        });
        args.object();
        equal(args.args[0], ['A', 'B', 'C']);
        args.arr();
        equal(args.args[0], false);
        args.bool();
        equal(args.args[0](), 'function1');
        args.func();
        return assert.lengthOf(args.args, 0);
      };
      return fn('test1', 'test2', 111, 222, {
        name: 'sam'
      }, new Foo, {
        age: 17
      }, [1, 2, 3], ['A', 'B', 'C'], true, false, fn1, fn2, null);
    });
    it("shift", function() {
      var fn;
      fn = function() {
        var args;
        args = new args2(arguments);
        assert.lengthOf(args.args, 14);
        assert.lengthOf(args.strs, 2);
        assert.lengthOf(args.nums, 2);
        assert.lengthOf(args.objs, 2);
        assert.lengthOf(args.arrays, 2);
        assert.lengthOf(args.bools, 2);
        assert.lengthOf(args.funcs, 2);
        assert.lengthOf(args.others, 2);
        equal(args.shift(), 'test1');
        assert.lengthOf(args.args, 13);
        assert.lengthOf(args.strs, 1);
        equal(args.shift(), 'test2');
        assert.lengthOf(args.args, 12);
        assert.lengthOf(args.strs, 0);
        equal(args.shift(), 111);
        assert.lengthOf(args.args, 11);
        assert.lengthOf(args.nums, 1);
        equal(args.shift(), 222);
        assert.lengthOf(args.args, 10);
        assert.lengthOf(args.nums, 0);
        equal(args.shift(), {
          name: 'sam'
        });
        assert.lengthOf(args.args, 9);
        assert.lengthOf(args.objs, 1);
        equal(args.shift().a, 1);
        assert.lengthOf(args.args, 8);
        assert.lengthOf(args.others, 1);
        equal(args.shift(), {
          age: 17
        });
        assert.lengthOf(args.args, 7);
        assert.lengthOf(args.objs, 0);
        equal(args.shift(), [1, 2, 3]);
        assert.lengthOf(args.args, 6);
        assert.lengthOf(args.arrays, 1);
        equal(args.shift(), ['A', 'B', 'C']);
        assert.lengthOf(args.args, 5);
        assert.lengthOf(args.arrays, 0);
        equal(args.shift(), true);
        assert.lengthOf(args.args, 4);
        assert.lengthOf(args.bools, 1);
        equal(args.shift(), false);
        assert.lengthOf(args.args, 3);
        assert.lengthOf(args.bools, 0);
        equal(args.shift()(), 'function1');
        assert.lengthOf(args.args, 2);
        assert.lengthOf(args.funcs, 1);
        equal(args.shift()(), 'function2');
        assert.lengthOf(args.args, 1);
        assert.lengthOf(args.funcs, 0);
        equal(args.shift(), null);
        assert.lengthOf(args.args, 0);
        assert.lengthOf(args.others, 0);
        equal(args.shift(), void 0);
        assert.lengthOf(args.args, 0);
        return assert.lengthOf(args.others, 0);
      };
      return fn('test1', 'test2', 111, 222, {
        name: 'sam'
      }, new Foo, {
        age: 17
      }, [1, 2, 3], ['A', 'B', 'C'], true, false, fn1, fn2, null);
    });
    it("pop", function() {
      var fn;
      fn = function() {
        var args;
        args = new args2(arguments);
        assert.lengthOf(args.args, 14);
        assert.lengthOf(args.strs, 2);
        assert.lengthOf(args.nums, 2);
        assert.lengthOf(args.objs, 2);
        assert.lengthOf(args.arrays, 2);
        assert.lengthOf(args.bools, 2);
        assert.lengthOf(args.funcs, 2);
        assert.lengthOf(args.others, 2);
        equal(args.pop(), null);
        assert.lengthOf(args.args, 13);
        assert.lengthOf(args.others, 1);
        equal(args.pop()(), 'function2');
        assert.lengthOf(args.args, 12);
        assert.lengthOf(args.funcs, 1);
        equal(args.pop()(), 'function1');
        assert.lengthOf(args.args, 11);
        assert.lengthOf(args.funcs, 0);
        equal(args.pop(), false);
        assert.lengthOf(args.args, 10);
        assert.lengthOf(args.bools, 1);
        equal(args.pop(), true);
        assert.lengthOf(args.args, 9);
        assert.lengthOf(args.bools, 0);
        equal(args.pop(), ['A', 'B', 'C']);
        assert.lengthOf(args.args, 8);
        assert.lengthOf(args.arrays, 1);
        equal(args.pop(), [1, 2, 3]);
        assert.lengthOf(args.args, 7);
        assert.lengthOf(args.arrays, 0);
        equal(args.pop(), {
          age: 17
        });
        assert.lengthOf(args.args, 6);
        assert.lengthOf(args.objs, 1);
        equal(args.pop().a, 1);
        assert.lengthOf(args.args, 5);
        assert.lengthOf(args.others, 0);
        equal(args.pop(), {
          name: 'sam'
        });
        assert.lengthOf(args.args, 4);
        assert.lengthOf(args.objs, 0);
        equal(args.pop(), 222);
        assert.lengthOf(args.args, 3);
        assert.lengthOf(args.nums, 1);
        equal(args.pop(), 111);
        assert.lengthOf(args.args, 2);
        assert.lengthOf(args.nums, 0);
        equal(args.pop(), 'test2');
        assert.lengthOf(args.args, 1);
        assert.lengthOf(args.strs, 1);
        equal(args.pop(), 'test1');
        assert.lengthOf(args.args, 0);
        assert.lengthOf(args.strs, 0);
        equal(args.pop(), void 0);
        assert.lengthOf(args.args, 0);
        return assert.lengthOf(args.others, 0);
      };
      return fn('test1', 'test2', 111, 222, {
        name: 'sam'
      }, new Foo, {
        age: 17
      }, [1, 2, 3], ['A', 'B', 'C'], true, false, fn1, fn2, null);
    });
    it("shift required", function() {
      var fn;
      fn = function() {
        var args;
        args = new args2(arguments);
        args.shift(true);
      };
      return assert.throws(fn, /argument is required/);
    });
    it("shift required(with custom message)", function() {
      var fn;
      fn = function() {
        var args;
        args = new args2(arguments);
        args.shift(true, 'custom error message');
      };
      return assert.throws(fn, /custom error message/);
    });
    it("shift with default_value", function() {
      var fn;
      fn = function() {
        var args;
        args = new args2(arguments);
        return args.shift(false, 'default_value');
      };
      return equal(fn(), 'default_value');
    });
    it("pop required", function() {
      var fn;
      fn = function() {
        var args;
        args = new args2(arguments);
        args.pop(true);
      };
      return assert.throws(fn, /argument is required/);
    });
    it("pop required(with custom message)", function() {
      var fn;
      fn = function() {
        var args;
        args = new args2(arguments);
        args.pop(true, 'custom error message');
      };
      return assert.throws(fn, /custom error message/);
    });
    return it("pop with default_value", function() {
      var fn;
      fn = function() {
        var args;
        args = new args2(arguments);
        return args.pop(false, 'default_value');
      };
      return equal(fn(), 'default_value');
    });
  });

  describe("bridge(instance)", function() {
    var sum;
    sum = function() {
      var args;
      args = new args2(arguments);
      return args.nums.reduce(function(p, c) {
        return p + c;
      });
    };
    it("baseFunction", function() {
      return equal(sum(1, 2, 3), 6);
    });
    it("bridgeFunction(shift)", function() {
      var bridgeFunction1;
      bridgeFunction1 = function() {
        var args, omitNumber;
        args = new args2(arguments);
        omitNumber = args.shift();
        return args.bridge(sum);
      };
      return equal(bridgeFunction1(2, 3, 4), 7);
    });
    it("bridgeFunction(pop)", function() {
      var bridgeFunction2;
      bridgeFunction2 = function() {
        var args, omitNumber;
        args = new args2(arguments);
        omitNumber = args.pop();
        return args.bridge(sum);
      };
      return equal(bridgeFunction2(2, 3, 4), 5);
    });
    it("passFunction(shift)", function() {
      var passFunction1;
      passFunction1 = function() {
        var args, omitNumber;
        args = new args2(arguments);
        omitNumber = args.shift();
        return args.pass(sum);
      };
      return equal(passFunction1(2, 3, 4), 7);
    });
    return it("passFunction(pop)", function() {
      var passFunction2;
      passFunction2 = function() {
        var args, omitNumber;
        args = new args2(arguments);
        omitNumber = args.pop();
        return args.pass(sum);
      };
      return equal(passFunction2(2, 3, 4), 5);
    });
  });

}).call(this);
